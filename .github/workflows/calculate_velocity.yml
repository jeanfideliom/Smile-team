name: Sprint Velocity Calculation

on:
  workflow_dispatch:  # Allows manual execution
  schedule:
    - cron: "0 0 * * 0"  # Runs every Sunday at midnight

permissions:
  issues: read

jobs:
  calculate-velocity:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Fetch Issues with Story Points
        id: fetch_issues
        run: |
          echo '{
            "query": "query {
              repository(owner: \"${{ github.repository_owner }}\", name: \"${{ github.event.repository.name }}\") {
                issues(first: 100, states: CLOSED) {
                  nodes {
                    title
                    number
                    projectItems(first: 5) {
                      nodes {
                        fieldValues(first: 10) {
                          nodes {
                            field {
                              ... on ProjectV2FieldCommon {
                                name
                              }
                            }
                            value
                          }
                        }
                      }
                    }
                  }
                }
              }
            }"
          }' > query.json

          # Run GraphQL query
          curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: application/json" \
               -d @query.json \
               https://api.github.com/graphql > response.json

      - name: Debug API Response
        run: cat response.json || echo "response.json is empty"

      - name: Process Story Points
        run: |
          cat <<EOF > calculate_velocity.py
          import json

          try:
              # Load response data
              with open("response.json", "r") as f:
                  data = json.load(f)

              # Check if response contains issues
              issues = data.get("data", {}).get("repository", {}).get("issues", {}).get("nodes", [])
              if not issues:
                  raise ValueError("No closed issues found or API response invalid")

              # Debug output
              print("Fetched Issues:", json.dumps(issues, indent=2))

              # Extract Story Points from custom fields
              velocity = 0
              for issue in issues:
                  for projectItem in issue.get("projectItems", {}).get("nodes", []):
                      for field in projectItem.get("fieldValues", {}).get("nodes", []):
                          if field.get("field", {}).get("name") == "Story Points":
                              try:
                                  points = int(field["value"])
                                  velocity += points
                              except (ValueError, TypeError):
                                  print(f"‚ö†Ô∏è Skipping invalid Story Points value: {field['value']}")

              print(f"üî• Sprint Velocity: {velocity} Story Points")

              # Save result
              with open("velocity.txt", "w") as f:
                  f.write(f"Sprint Velocity: {velocity} Story Points\n")

          except Exception as e:
              print(f"‚ùå Error: {e}")
              exit(1)
          EOF

      - name: Run Velocity Calculation
        run: python3 calculate_velocity.py

      - name: Upload Velocity Report
        uses: actions/upload-artifact@v4
        with:
          name: velocity-report
          path: velocity.txt
